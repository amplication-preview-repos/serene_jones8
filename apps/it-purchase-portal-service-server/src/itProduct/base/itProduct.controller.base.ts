/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItProductService } from "../itProduct.service";
import { ItProductCreateInput } from "./ItProductCreateInput";
import { ItProduct } from "./ItProduct";
import { ItProductFindManyArgs } from "./ItProductFindManyArgs";
import { ItProductWhereUniqueInput } from "./ItProductWhereUniqueInput";
import { ItProductUpdateInput } from "./ItProductUpdateInput";
import { PurchaseRequestFindManyArgs } from "../../purchaseRequest/base/PurchaseRequestFindManyArgs";
import { PurchaseRequest } from "../../purchaseRequest/base/PurchaseRequest";
import { PurchaseRequestWhereUniqueInput } from "../../purchaseRequest/base/PurchaseRequestWhereUniqueInput";

export class ItProductControllerBase {
  constructor(protected readonly service: ItProductService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItProduct })
  async createItProduct(
    @common.Body() data: ItProductCreateInput
  ): Promise<ItProduct> {
    return await this.service.createItProduct({
      data: data,
      select: {
        availability: true,
        createdAt: true,
        description: true,
        id: true,
        price: true,
        productName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItProduct] })
  @ApiNestedQuery(ItProductFindManyArgs)
  async itProducts(@common.Req() request: Request): Promise<ItProduct[]> {
    const args = plainToClass(ItProductFindManyArgs, request.query);
    return this.service.itProducts({
      ...args,
      select: {
        availability: true,
        createdAt: true,
        description: true,
        id: true,
        price: true,
        productName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itProduct(
    @common.Param() params: ItProductWhereUniqueInput
  ): Promise<ItProduct | null> {
    const result = await this.service.itProduct({
      where: params,
      select: {
        availability: true,
        createdAt: true,
        description: true,
        id: true,
        price: true,
        productName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItProduct(
    @common.Param() params: ItProductWhereUniqueInput,
    @common.Body() data: ItProductUpdateInput
  ): Promise<ItProduct | null> {
    try {
      return await this.service.updateItProduct({
        where: params,
        data: data,
        select: {
          availability: true,
          createdAt: true,
          description: true,
          id: true,
          price: true,
          productName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItProduct(
    @common.Param() params: ItProductWhereUniqueInput
  ): Promise<ItProduct | null> {
    try {
      return await this.service.deleteItProduct({
        where: params,
        select: {
          availability: true,
          createdAt: true,
          description: true,
          id: true,
          price: true,
          productName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/purchaseRequests")
  @ApiNestedQuery(PurchaseRequestFindManyArgs)
  async findPurchaseRequests(
    @common.Req() request: Request,
    @common.Param() params: ItProductWhereUniqueInput
  ): Promise<PurchaseRequest[]> {
    const query = plainToClass(PurchaseRequestFindManyArgs, request.query);
    const results = await this.service.findPurchaseRequests(params.id, {
      ...query,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        itProduct: {
          select: {
            id: true,
          },
        },

        requestDate: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseRequests")
  async connectPurchaseRequests(
    @common.Param() params: ItProductWhereUniqueInput,
    @common.Body() body: PurchaseRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseRequests: {
        connect: body,
      },
    };
    await this.service.updateItProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseRequests")
  async updatePurchaseRequests(
    @common.Param() params: ItProductWhereUniqueInput,
    @common.Body() body: PurchaseRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseRequests: {
        set: body,
      },
    };
    await this.service.updateItProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseRequests")
  async disconnectPurchaseRequests(
    @common.Param() params: ItProductWhereUniqueInput,
    @common.Body() body: PurchaseRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseRequests: {
        disconnect: body,
      },
    };
    await this.service.updateItProduct({
      where: params,
      data,
      select: { id: true },
    });
  }
}
