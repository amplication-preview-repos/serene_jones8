/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItProduct } from "./ItProduct";
import { ItProductCountArgs } from "./ItProductCountArgs";
import { ItProductFindManyArgs } from "./ItProductFindManyArgs";
import { ItProductFindUniqueArgs } from "./ItProductFindUniqueArgs";
import { CreateItProductArgs } from "./CreateItProductArgs";
import { UpdateItProductArgs } from "./UpdateItProductArgs";
import { DeleteItProductArgs } from "./DeleteItProductArgs";
import { PurchaseRequestFindManyArgs } from "../../purchaseRequest/base/PurchaseRequestFindManyArgs";
import { PurchaseRequest } from "../../purchaseRequest/base/PurchaseRequest";
import { ItProductService } from "../itProduct.service";
@graphql.Resolver(() => ItProduct)
export class ItProductResolverBase {
  constructor(protected readonly service: ItProductService) {}

  async _itProductsMeta(
    @graphql.Args() args: ItProductCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItProduct])
  async itProducts(
    @graphql.Args() args: ItProductFindManyArgs
  ): Promise<ItProduct[]> {
    return this.service.itProducts(args);
  }

  @graphql.Query(() => ItProduct, { nullable: true })
  async itProduct(
    @graphql.Args() args: ItProductFindUniqueArgs
  ): Promise<ItProduct | null> {
    const result = await this.service.itProduct(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItProduct)
  async createItProduct(
    @graphql.Args() args: CreateItProductArgs
  ): Promise<ItProduct> {
    return await this.service.createItProduct({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItProduct)
  async updateItProduct(
    @graphql.Args() args: UpdateItProductArgs
  ): Promise<ItProduct | null> {
    try {
      return await this.service.updateItProduct({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItProduct)
  async deleteItProduct(
    @graphql.Args() args: DeleteItProductArgs
  ): Promise<ItProduct | null> {
    try {
      return await this.service.deleteItProduct(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PurchaseRequest], { name: "purchaseRequests" })
  async findPurchaseRequests(
    @graphql.Parent() parent: ItProduct,
    @graphql.Args() args: PurchaseRequestFindManyArgs
  ): Promise<PurchaseRequest[]> {
    const results = await this.service.findPurchaseRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
