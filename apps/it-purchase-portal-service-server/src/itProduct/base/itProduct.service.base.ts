/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ItProduct as PrismaItProduct,
  PurchaseRequest as PrismaPurchaseRequest,
} from "@prisma/client";

export class ItProductServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItProductCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itProduct.count(args);
  }

  async itProducts(
    args: Prisma.ItProductFindManyArgs
  ): Promise<PrismaItProduct[]> {
    return this.prisma.itProduct.findMany(args);
  }
  async itProduct(
    args: Prisma.ItProductFindUniqueArgs
  ): Promise<PrismaItProduct | null> {
    return this.prisma.itProduct.findUnique(args);
  }
  async createItProduct(
    args: Prisma.ItProductCreateArgs
  ): Promise<PrismaItProduct> {
    return this.prisma.itProduct.create(args);
  }
  async updateItProduct(
    args: Prisma.ItProductUpdateArgs
  ): Promise<PrismaItProduct> {
    return this.prisma.itProduct.update(args);
  }
  async deleteItProduct(
    args: Prisma.ItProductDeleteArgs
  ): Promise<PrismaItProduct> {
    return this.prisma.itProduct.delete(args);
  }

  async findPurchaseRequests(
    parentId: string,
    args: Prisma.PurchaseRequestFindManyArgs
  ): Promise<PrismaPurchaseRequest[]> {
    return this.prisma.itProduct
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseRequests(args);
  }
}
