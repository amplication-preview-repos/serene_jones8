/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PurchaseRequest as PrismaPurchaseRequest,
  Approval as PrismaApproval,
  Employee as PrismaEmployee,
  ItProduct as PrismaItProduct,
} from "@prisma/client";

export class PurchaseRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PurchaseRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.purchaseRequest.count(args);
  }

  async purchaseRequests(
    args: Prisma.PurchaseRequestFindManyArgs
  ): Promise<PrismaPurchaseRequest[]> {
    return this.prisma.purchaseRequest.findMany(args);
  }
  async purchaseRequest(
    args: Prisma.PurchaseRequestFindUniqueArgs
  ): Promise<PrismaPurchaseRequest | null> {
    return this.prisma.purchaseRequest.findUnique(args);
  }
  async createPurchaseRequest(
    args: Prisma.PurchaseRequestCreateArgs
  ): Promise<PrismaPurchaseRequest> {
    return this.prisma.purchaseRequest.create(args);
  }
  async updatePurchaseRequest(
    args: Prisma.PurchaseRequestUpdateArgs
  ): Promise<PrismaPurchaseRequest> {
    return this.prisma.purchaseRequest.update(args);
  }
  async deletePurchaseRequest(
    args: Prisma.PurchaseRequestDeleteArgs
  ): Promise<PrismaPurchaseRequest> {
    return this.prisma.purchaseRequest.delete(args);
  }

  async findApprovals(
    parentId: string,
    args: Prisma.ApprovalFindManyArgs
  ): Promise<PrismaApproval[]> {
    return this.prisma.purchaseRequest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .approvals(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.purchaseRequest
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }

  async getItProduct(parentId: string): Promise<PrismaItProduct | null> {
    return this.prisma.purchaseRequest
      .findUnique({
        where: { id: parentId },
      })
      .itProduct();
  }
}
