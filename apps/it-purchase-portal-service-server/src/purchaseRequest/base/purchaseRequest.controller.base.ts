/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PurchaseRequestService } from "../purchaseRequest.service";
import { PurchaseRequestCreateInput } from "./PurchaseRequestCreateInput";
import { PurchaseRequest } from "./PurchaseRequest";
import { PurchaseRequestFindManyArgs } from "./PurchaseRequestFindManyArgs";
import { PurchaseRequestWhereUniqueInput } from "./PurchaseRequestWhereUniqueInput";
import { PurchaseRequestUpdateInput } from "./PurchaseRequestUpdateInput";
import { ApprovalFindManyArgs } from "../../approval/base/ApprovalFindManyArgs";
import { Approval } from "../../approval/base/Approval";
import { ApprovalWhereUniqueInput } from "../../approval/base/ApprovalWhereUniqueInput";

export class PurchaseRequestControllerBase {
  constructor(protected readonly service: PurchaseRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PurchaseRequest })
  async createPurchaseRequest(
    @common.Body() data: PurchaseRequestCreateInput
  ): Promise<PurchaseRequest> {
    return await this.service.createPurchaseRequest({
      data: {
        ...data,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,

        itProduct: data.itProduct
          ? {
              connect: data.itProduct,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        itProduct: {
          select: {
            id: true,
          },
        },

        requestDate: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PurchaseRequest] })
  @ApiNestedQuery(PurchaseRequestFindManyArgs)
  async purchaseRequests(
    @common.Req() request: Request
  ): Promise<PurchaseRequest[]> {
    const args = plainToClass(PurchaseRequestFindManyArgs, request.query);
    return this.service.purchaseRequests({
      ...args,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        itProduct: {
          select: {
            id: true,
          },
        },

        requestDate: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PurchaseRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async purchaseRequest(
    @common.Param() params: PurchaseRequestWhereUniqueInput
  ): Promise<PurchaseRequest | null> {
    const result = await this.service.purchaseRequest({
      where: params,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        itProduct: {
          select: {
            id: true,
          },
        },

        requestDate: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PurchaseRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePurchaseRequest(
    @common.Param() params: PurchaseRequestWhereUniqueInput,
    @common.Body() data: PurchaseRequestUpdateInput
  ): Promise<PurchaseRequest | null> {
    try {
      return await this.service.updatePurchaseRequest({
        where: params,
        data: {
          ...data,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,

          itProduct: data.itProduct
            ? {
                connect: data.itProduct,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          employee: {
            select: {
              id: true,
            },
          },

          id: true,

          itProduct: {
            select: {
              id: true,
            },
          },

          requestDate: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PurchaseRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePurchaseRequest(
    @common.Param() params: PurchaseRequestWhereUniqueInput
  ): Promise<PurchaseRequest | null> {
    try {
      return await this.service.deletePurchaseRequest({
        where: params,
        select: {
          createdAt: true,

          employee: {
            select: {
              id: true,
            },
          },

          id: true,

          itProduct: {
            select: {
              id: true,
            },
          },

          requestDate: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/approvals")
  @ApiNestedQuery(ApprovalFindManyArgs)
  async findApprovals(
    @common.Req() request: Request,
    @common.Param() params: PurchaseRequestWhereUniqueInput
  ): Promise<Approval[]> {
    const query = plainToClass(ApprovalFindManyArgs, request.query);
    const results = await this.service.findApprovals(params.id, {
      ...query,
      select: {
        approvalDate: true,
        approver: true,
        createdAt: true,
        id: true,

        purchaseRequest: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/approvals")
  async connectApprovals(
    @common.Param() params: PurchaseRequestWhereUniqueInput,
    @common.Body() body: ApprovalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approvals: {
        connect: body,
      },
    };
    await this.service.updatePurchaseRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/approvals")
  async updateApprovals(
    @common.Param() params: PurchaseRequestWhereUniqueInput,
    @common.Body() body: ApprovalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approvals: {
        set: body,
      },
    };
    await this.service.updatePurchaseRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/approvals")
  async disconnectApprovals(
    @common.Param() params: PurchaseRequestWhereUniqueInput,
    @common.Body() body: ApprovalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approvals: {
        disconnect: body,
      },
    };
    await this.service.updatePurchaseRequest({
      where: params,
      data,
      select: { id: true },
    });
  }
}
